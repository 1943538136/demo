server:
  port: 8091
  servlet:
    context-path: /order
logging:
  level:
    root: info
    druid:
      sql:
        Statement: DEBUG
  #security:
    #oauth2:
      #client:
      #client-id: reader
      #client-secret: secret
      #grant-type: authorization_code
      #scope: info
      #access-token-uri: http://localhost:8090/account/oauth/token
      #user-authorization-uri: http://localhost:8090/account/oauth/authorize
      #resource:
        #jwt:
        #key-uri: http://localhost:8090/account/oauth/token_key

  #security.oauth2.client.client-id=reader
  #security.oauth2.client.client-secret=secret
  #security.oauth2.client.grant-type=authorization_code
  #security.oauth2.client.scope=info
  #security.oauth2.client.access-token-uri=http://localhost:8090/account/oauth/token
  #security.oauth2.client.user-authorization-uri=http://localhost:8090/account/oauth/authorize
  #security.oauth2.resource.jwt.key-uri=http://localhost:8090/account/oauth/token_key
  #spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://localhost:8090/account/.well-known/jwks.json
  #spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8090/account
spring:
  profiles:
    active: dev
  application:
    name: order
  devtools:
    add-properties: false
#  security:
      #    oauth2:
      #resourceserver:
      #  jwt:
      #    jwk-set-uri: http://localhost:8090/account/.well-known/jwks.json
    #    issuer-uri: http://localhost:8090/account
  datasource:
    username: root
    password:
    url: jdbc:mysql://localhost:3307/demo?serverTimezone=GMT%2B8&characterEncoding=UTF-8&useSSL=false
    driver-class-name: com.mysql.cj.jdbc.Driver
    type: com.alibaba.druid.pool.DruidDataSource
    #Spring Boot 默认是不注入这些属性值的，需要自己绑定
    #druid 数据源专有配置
    initialSize: 5
    minIdle: 5
    maxActive: 20
    maxWait: 60000
    timeBetweenEvictionRunsMillis: 60000
    minEvictableIdleTimeMillis: 300000
    validationQuery: SELECT 1 FROM DUAL
    testWhileIdle: true
    testOnBorrow: false
    testOnReturn: false
    # 打开PSCache
    poolPreparedStatements: true
    #配置监控统计拦截的filters，stat:监控统计、log4j：日志记录、wall：防御sql注入
    #如果运行时报错  java.lang.ClassNotFoundException: org.apache.log4j.Priority
    #则导入 log4j 依赖即可，Maven 地址： https://mvnrepository.com/artifact/log4j/log4j
    #filters: stat,wall,stat,slf4j,default
    #指定每个连接上PSCache的大小
    maxPoolPreparedStatementPerConnectionSize: 20
    #合并多个DruidDataSource的监控数据
    useGlobalDataSourceStat: true
    #通过connectProperties属性来打开mergeSql功能；慢SQL记录
    #connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
    druid:
      filter:
        slf4j:
          enabled: true
          statement-close-after-log-enabled: false
          statement-prepare-after-log-enabled: false
        stat:
          merge-sql: true
          slow-sql-millis: 5000